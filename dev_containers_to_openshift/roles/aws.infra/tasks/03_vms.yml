---
# roles/aws.provision/tasks/03_vms.yml

#####
# Find latest RHEL 8.0 AMI from Red Hat
#####
- name: find ami for node
  ec2_ami_info:
    region: "{{ aws_region }}"
    owners: "{{ ec2_info.rhel8.owners }}"
    filters:
      name: "{{ ec2_info.rhel8.filter }}"
      architecture: "{{ ec2_info.rhel8.architecture }}"
  register: amis

- name: save ami for node
  set_fact:
    node_ami: >
      {{ amis.images | selectattr('name', 'defined') | sort(attribute='creation_date') | last }}

#- name: Set workstation AMI device
#  set_fact:
#    ec2_workstation_device: "{{ami_find['results'][0]['root_device_name']}}"

- debug: msg="{{ node_ami }}"
#- debug: msg="{{ ec2_workstation_device }}"



- name: Provision WorkStation
  ec2:
   instance_type: "{{ ec2_info.rhel8.size }}"
   image: "{{ node_ami.image_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   wait: true
   key_name: "{{ remote_user_sshkey }}"
#   vpc_subnet_id: "{{ public_subnet_id }}"
#   group: ['{{ seg_vpc }}', '{{ seg_ingress }}', '{{ seg_egress }}', '{{ seg_ssh }}']
#   volumes:
#    - device_name: "{{ ec2_workstation_device }}"
#      volume_size: "{{ os_workstation_root_vol_size }}"
#      volume_type: gp2
#      delete_on_termination: true
   group: "{{ seg_vpc }}"
   count_tag:
    Name: "{{ tag_workstation }}"
   instance_tags:
    Name: "{{ tag_workstation }}"
    namespace: "{{ namespace }}"
   exact_count: 1
#   state: "{{ newstate }}"
  register: ec2_workstation
  when: newstate != "absent"

- name: Allocate a new elastic IP and associate it with workstation
  ec2_eip:
   device_id: "{{ ec2_workstation['tagged_instances'][0]['id'] }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   release_on_disassociation: true
  register: workstation_elastic_ip
  when: newstate != "absent"

- name: Create instance list
  ec2_instance_info:
    region: "{{ aws_region }}"
    filters:
      "tag:Name": "{{ tag_workstation }}"
      instance-state-name: ['running']
  register: instance_list

- debug: msg="{{ instance_list }}"

- debug: msg="{{ instance_list.instances[0].instance_id }}"

- name: Delete elastic IP associated with workstation, if requested
  ec2_eip:
#   device_id: "{{ ec2_workstation['tagged_instances'][0]['id'] }}"
   device_id: "{{ instance_list.instances[0].instance_id }}"
   region: "{{ aws_region }}"
   aws_access_key: "{{ aws_access_key }}"
   aws_secret_key: "{{ aws_secret_key }}"
   state: "{{ newstate }}"
  register: workstation_elastic_ip
  when: newstate == "XXXXXabsent"

- name: Delete WorkStation, if requested
  ec2:
#    instance_type: "{{ ec2_workstation_size }}"
#    image: "{{ ec2_workstation_image }}"
    region: "{{ aws_region }}"
    aws_access_key: "{{ aws_access_key }}"
    aws_secret_key: "{{ aws_secret_key }}"
    wait: true
    state: "{{ newstate }}"
#    group: "{{ seg_vpc }}"
#     instance_ids: "{{ item }}"
    instance_ids: "{{ instance_list.instances[0].instance_id }}"
#    count_tag:
#      Name: "{{ tag_workstation }}"
#    instance_tags:
#      Name: "{{ tag_workstation }}"
#      namespace: "{{ namespace }}"
  with_items: "{{ instance_list }}"
  when: newstate == "absent"
